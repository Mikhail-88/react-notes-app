{"version":3,"sources":["context/alert/alertContext.js","context/firebase/firebaseContext.js","components/Form.js","components/NotesList.js","components/Loader.js","pages/Home.js","pages/About.js","components/Navbar.js","components/alert.js","context/alert/alertReducer.js","context/types.js","context/alert/AlertState.js","context/firebase/firebaseReducer.js","context/firebase/FirebaseState.js","App.js","serviceWorker.js","index.js"],"names":["AlertContext","createContext","FirebaseContext","Form","useState","value","setValue","alert","useContext","firebase","className","onSubmit","event","preventDefault","trim","addNote","then","show","catch","type","placeholder","onChange","target","NotesList","notes","onRemove","TransitionGroup","component","map","note","CSSTransition","key","id","classNames","timeout","title","date","onClick","Loader","role","Home","loading","fetchNotes","removeNote","useEffect","About","Navbar","to","exact","Alert","hide","in","visible","enter","exit","mountOnEnter","unmountOnExit","text","aria-label","aria-hidden","handlers","state","payload","alertReducer","action","DEFAULT","AlertState","children","useReducer","dispatch","Provider","filter","firebaseReducer","url","process","FirebaseState","showLoader","stopLoader","a","axios","get","res","data","Object","keys","Date","toJSON","slice","post","name","Error","message","delete","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console"],"mappings":"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","file":"static/js/main.ef1c2a9b.chunk.js","sourcesContent":["import { createContext } from 'react';\n\nconst AlertContext = createContext();\n\nexport default AlertContext;","import { createContext } from 'react';\n\nconst FirebaseContext = createContext();\n\nexport default FirebaseContext;","import React, { useState, useContext } from 'react';\nimport AlertContext from '../context/alert/alertContext';\nimport FirebaseContext from '../context/firebase/firebaseContext';\n\nconst Form = () => {\n  const [value, setValue] = useState('');\n  const alert = useContext(AlertContext);\n  const firebase = useContext(FirebaseContext);\n\n  const submitHandler = event => {\n    event.preventDefault();\n\n    if (value.trim()) {\n      firebase.addNote(value.trim()).then(() => {\n        alert.show('Note added', 'success');\n      }).catch(() => {\n        alert.show('Something went wrong', 'danger');\n      });\n\n      setValue('');\n    } else {\n      alert.show('Please, enter your note');\n    }\n  }\n\n  return (\n    <form className=\"mt-4\" onSubmit={submitHandler}>\n      <div className=\"form-group\">\n        <input \n          type=\"text\" \n          className=\"form-control\" \n          placeholder=\"Enter your note\"\n          value={value}\n          onChange={({ target }) => setValue(target.value)}\n        />\n      </div>\n    </form>\n  );\n};\n\nexport default Form;","import React, { useContext } from 'react';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport AlertContext from '../context/alert/alertContext';\n\nconst NotesList = ({ notes, onRemove }) => {\n  const alert = useContext(AlertContext);\n\n  return (\n    <TransitionGroup component=\"ul\" className=\"list-group\">\n      {notes.map(note => (\n        <CSSTransition \n          key={note.id}\n          classNames='note'\n          timeout={750}\n        >\n          <li className=\"list-group-item note\">\n            <strong>{note.title}</strong>\n            <span>{note.date}</span>\n            <button \n              type=\"button\" \n              className=\"btn btn-outline-danger btn-sm\"\n              onClick={() => {\n                onRemove(note.id);\n                alert.show('Note has been deleted', 'danger');\n              }}\n            >\n              Delete\n            </button>\n          </li>\n        </CSSTransition>\n      ))}\n    </TransitionGroup>\n  );\n};\n\nexport default NotesList;","import React from 'react';\n\nconst Loader = () => (\n  <div className=\"text-center\">\n    <div className=\"spinner-border text-primary\" role=\"status\">\n      <span className=\"sr-only\">Loading...</span>\n    </div>\n  </div>\n);\n\nexport default Loader;","import React, { Fragment, useContext, useEffect } from 'react';\nimport Form from '../components/Form';\nimport NotesList from '../components/NotesList';\nimport FirebaseContext from '../context/firebase/firebaseContext';\nimport Loader from '../components/Loader';\n\nconst Home = () => {\n  const { loading, notes, fetchNotes, removeNote } = useContext(FirebaseContext);\n\n  useEffect(() => {\n    fetchNotes();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <Fragment>\n      <Form />\n      <hr />\n      {loading ? <Loader /> : <NotesList notes={notes} onRemove={removeNote} />}\n    </Fragment>\n  )\n};\n\nexport default Home;","import React from 'react';\n\nconst About = () => (\n  <div className=\"jumbotron mt-4\">\n    <div className=\"container\">\n      <h1 className=\"display-4\">Welcome to my Note App</h1>\n      <p className=\"lead\">This is an application for creating and saving your personal notes.</p>\n    </div>\n  </div>\n);\n\nexport default About;","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nconst Navbar = () => (\n  <nav className=\"navbar navbar-dark navbar-expand-lg bg-primary\">\n    <div className=\"navbar-brand\">\n      Note App\n    </div>\n    <ul className=\"navbar-nav\">\n      <li className=\"nav-item\">\n        <NavLink className=\"nav-link\" to='/' exact>Home</NavLink>\n      </li>\n      <li className=\"nav-item\">\n        <NavLink className=\"nav-link\" to='/about/'>About</NavLink>\n      </li>\n    </ul>\n  </nav>\n);\n\nexport default Navbar;","import React, { useContext } from 'react';\nimport AlertContext from '../context/alert/alertContext';\nimport { CSSTransition } from 'react-transition-group';\n\nconst Alert = () => {\n  const { alert, hide }  = useContext(AlertContext);\n\n  return (\n    <CSSTransition \n      in={alert.visible} \n      timeout={{\n        enter: 500,\n        exit: 350\n      }} \n      classNames='alert'\n      mountOnEnter\n      unmountOnExit\n    >\n      <div className={`alert alert-${alert.type || 'warning'} alert-dismissible mt-4`}>\n        <strong>Attention! </strong>\n          {alert.text}\n        <button onClick={hide} type=\"button\" className=\"close\" aria-label=\"Close\">\n          <span aria-hidden=\"true\">&times;</span>\n        </button>\n      </div>\n    </CSSTransition>\n  );\n};\n\nexport default Alert;","import { SHOW_ALERT } from '../types';\nimport { HIDE_ALERT } from '../types';\n\nconst handlers = {\n  [SHOW_ALERT]: (state, { payload }) => ({ ...payload, visible: true }),\n  [HIDE_ALERT]: (state) => ({ ...state, visible: false }),\n  DEFAULT: state => state\n}\n\nconst alertReducer = (state, action) => {\n  const handle = handlers[action.type] || handlers.DEFAULT;\n\n  return handle(state, action);\n};\n\nexport default alertReducer;","export const SHOW_ALERT = 'SHOW_ALERT';\nexport const HIDE_ALERT = 'HIDE_ALERT';\nexport const SHOW_LOADER = 'SHOW_LOADER';\nexport const STOP_LOADER = 'SHOW_LOADER';\nexport const ADD_NOTE = 'ADD_NOTE';\nexport const FETCH_NOTES = 'FETCH_NOTES';\nexport const REMOVE_NOTE = 'REMOVE_NOTE';","import React, { useReducer } from 'react';\nimport AlertContext from './alertContext';\nimport alertReducer from './alertReducer';\nimport { SHOW_ALERT } from '../types';\nimport { HIDE_ALERT } from '../types';\n\nconst AlertState = ({ children }) => {\n  const [state, dispatch] = useReducer(alertReducer, { visible: false });\n\n  const show = (text, type = 'warning') => {\n    dispatch({\n      type: SHOW_ALERT,\n      payload: {text, type}\n    });\n  };\n\n  const hide = () => dispatch({type: HIDE_ALERT});\n\n  return (\n    <AlertContext.Provider value={{\n      show, hide,\n      alert: state\n    }}>\n      {children}\n    </AlertContext.Provider>\n  );\n};\n\nexport default AlertState;","import { ADD_NOTE, SHOW_LOADER, FETCH_NOTES, REMOVE_NOTE, STOP_LOADER } from '../types';\n\nconst handlers = {\n  [SHOW_LOADER]: state => ({\n    ...state, \n    loading: true\n  }),\n  [STOP_LOADER]: state => ({\n    ...state, \n    loading: false\n  }),\n  [ADD_NOTE]: (state, {payload}) => ({\n    ...state,\n    notes: [...state.notes, payload]\n  }),\n  [FETCH_NOTES]: (state, {payload}) => ({\n    ...state,\n    notes: payload,\n    loading: false\n  }),\n  [REMOVE_NOTE]: (state, {payload}) => ({\n    ...state,\n    notes: state.notes.filter(note => note.id !== payload)\n  }),\n  DEFAULT: state => state\n}\n\nconst firebaseReducer = (state, action) => {\n  const handle = handlers[action.type] || handlers.DEFAULT;\n\n  return handle(state, action);\n}\n\nexport default firebaseReducer;","import React, { useReducer } from 'react';\nimport axios from 'axios';\nimport FirebaseContext from './firebaseContext';\nimport firebaseReducer from './firebaseReducer';\nimport { SHOW_LOADER, STOP_LOADER, ADD_NOTE, REMOVE_NOTE, FETCH_NOTES } from '../types';\n\nconst url = process.env.REACT_APP_DB_URL;\n\nconst FirebaseState = ({ children }) => {\n  const initialState = {\n    notes: [],\n    loading: false\n  };\n\n  const [state, dispatch] = useReducer(firebaseReducer, initialState);\n\n  const showLoader = () => dispatch({type: SHOW_LOADER});\n  const stopLoader = () => dispatch({type: STOP_LOADER});\n\n  const fetchNotes = async () => {\n    showLoader();\n    const res = await axios.get(`${url}/notes.json`);\n\n    if (!res.data) {\n      stopLoader();\n      return;\n    }\n\n    const payload = Object.keys(res.data).map(key => {\n      return {\n        ...res.data[key],\n        id: key\n      };\n    });\n\n    dispatch({\n      type: FETCH_NOTES,\n      payload\n    });\n  };\n\n  const addNote = async title => {\n    const note = {\n      title,\n      date: new Date().toJSON().slice(0, 10)\n    };\n\n    try {\n      const res = await axios.post(`${url}/notes.json`, note);\n      const payload = {\n        ...note,\n        id: res.data.name\n      };\n\n      dispatch({\n        type: ADD_NOTE,\n        payload\n      })\n    } catch (error) {\n      throw new Error(error.message);\n    }\n  }\n\n  const removeNote = async (id) => {\n    await axios.delete(`${url}/notes/${id}.json`);\n\n    dispatch({\n      type: REMOVE_NOTE,\n      payload: id\n    });\n  }\n\n  return (\n    <FirebaseContext.Provider value={{\n      showLoader, stopLoader, addNote, removeNote, fetchNotes,\n      loading: state.loading,\n      notes: state.notes\n    }}>\n      {children}\n    </FirebaseContext.Provider>\n  )\n}\n\nexport default FirebaseState;","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Home from './pages/Home';\nimport About from './pages/About';\nimport Navbar from './components/Navbar';\nimport Alert from './components/alert';\nimport AlertState from './context/alert/AlertState';\nimport FirebaseState from './context/firebase/FirebaseState';\n\nfunction App() {\n  return (\n    <FirebaseState>\n      <AlertState>\n        <Router>\n          <Navbar />\n          <div className=\"container\">\n            <Alert />\n            <Switch>\n              <Route path='/' component={Home} exact />\n              <Route path='/about' component={About} />\n            </Switch>\n          </div>\n        </Router>\n      </AlertState>\n    </FirebaseState>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}